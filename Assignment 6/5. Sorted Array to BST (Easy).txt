//https://www.geeksforgeeks.org/sorted-array-to-balanced-bst/
// author: ayush dwivedi

#include "bits/stdc++.h"

using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;
typedef long long int ll;
const ll mod = 1e9 + 7;
class tree {
public:
    int data;
    tree *left, *right;

    tree(int x) {
        this->data = x;
        this->left = this->right = NULL;
    }
};

//tree *build(int index, tree *root, int arr[], int n) {
//    if (index < n) {
//        if (arr[index] == -1) return NULL; //-1 denotes NULL
//        tree *temp = new tree(arr[index]);
//        root = temp;
//        root->left = build(2 * index + 1, root->left, arr, n);
//        root->right = build(2 * index + 2, root->right, arr, n);
//    }
//    return root;
//}

void inorder(tree* root){
    if(root){
        inorder(root->left);
        cout<<root->data<<" ";
        inorder(root->right);
    }
}
tree* build(int arr[],
                        int l, int r)
{
    if (l > r)   return NULL;
    int mid = (l + r)>>1;
    tree *root = new tree(arr[mid]);
    root->left = build(arr, l,
                                  mid - 1);
    root->right = build(arr, mid + 1, r);
    return root;
}
int main() {
    int n,target;
    cin>>n>>target;
    int arr[n];
    for (int i = 0; i < n; ++i) {
        cin>>arr[i];
    }
    tree *root= build(arr,0,n-1);
    inorder(root);
}