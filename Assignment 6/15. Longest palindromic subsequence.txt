//https://www.geeksforgeeks.org/longest-palindromic-subsequence-dp-12/
// author: ayush dwivedi

#include "bits/stdc++.h"

using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;
typedef long long int ll;
const ll mod = 1e9 + 7;

int solve(string &s, int len)
{
    vector<vector<int>>dp(len,vector<int>(len,0));
    for (int i = 0; i < len; i++)        dp[i][i] = 1;
    for (int index=2; index<=len; index++)
    {
        for (int i=0; i<len-index+1; i++)
        {
            int j = i+index-1;
            if (s[i] == s[j] && index == 2)
                dp[i][j] = 2;
            else if (s[i] == s[j])
                dp[i][j] = dp[i+1][j-1] + 2;
            else
                dp[i][j] = max(dp[i][j-1], dp[i+1][j]);
        }
    }
    return dp[0][len-1];
}
int main() {
    string s;
    cin>>s;
    cout<<solve(s,s.length());
}