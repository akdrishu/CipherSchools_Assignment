//stack using array
// author: ayush dwivedi

#include "bits/stdc++.h"

using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;
typedef long long int ll;
const ll mod = 1e9 + 7;

class MyStack
{
private:
    int arr[1000];
    int top;
public:
    MyStack(){top=-1;}
    int pop();
    void push(int);
};


int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        MyStack *sq = new MyStack();

        int Q;
        cin>>Q;
        while(Q--){
            int QueryType=0;
            cin>>QueryType;
            if(QueryType==1)
            {
                int a;
                cin>>a;
                sq->push(a);
            }else if(QueryType==2){
                cout<<sq->pop()<<" ";

            }
        }
        cout<<endl;
    }
}
void MyStack :: push(int x)
{

    top+=1;
    if(top==999){
        arr[top]=x;
        return;
    }
    arr[top]=x;
}
int MyStack :: pop()
{
    if(top==-1) {
        return -1;
    }
    int temp=arr[top];
    top-=1;
    return temp;
}
/*
//stack using linked list
#include <bits/stdc++.h>
using namespace std;

struct StackNode {
    int data;
    StackNode *next;
    StackNode(int a) {
        data = a;
        next = NULL;
    }
};

class MyStack {
private:
    StackNode *top;

public:
    void push(int);
    int pop();
    MyStack() { top = NULL; }
};

int main() {
    int T;
    cin >> T;
    while (T--) {
        MyStack *sq = new MyStack();

        int Q;
        cin >> Q;
        while (Q--) {
            int QueryType = 0;
            cin >> QueryType;
            if (QueryType == 1) {
                int a;
                cin >> a;
                sq->push(a);
            } else if (QueryType == 2) {
                cout << sq->pop() << " ";
            }
        }
        cout << endl;
    }
}

struct StackNode
{
    int data;
    StackNode *next;
    StackNode(int a)
    {
        data = a;
        next = NULL;
    }
};

class MyStack {
private:
StackNode *top;
public :
    void push(int);
    int pop();
    MyStack()
    {
        top = NULL;
    }
};

void MyStack ::push(int x) {
    StackNode *temp = new StackNode(x);
    temp->next=top;
    top=temp;

}
int MyStack ::pop() {
    if(top==NULL){
        return -1;
    }
    StackNode *temp=top;
    int value=temp->data;
    top=top->next;
    free(temp);
    return value;

}
*/