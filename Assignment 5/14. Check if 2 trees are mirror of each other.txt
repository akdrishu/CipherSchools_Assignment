//Check if 2 trees are mirror of each other
// author: ayush dwivedi

#include "bits/stdc++.h"

using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;
typedef long long int ll;
const ll mod = 1e9 + 7;

class tree{
public:
    int data;
    tree *left, *right;
    tree(int x){
        this->data=x;
        this->left=this->right=NULL;
    }
};

tree *build(int index, tree *root, int arr[], int n){
    if(index<n){
        if(arr[index]==-1)  return NULL; //-1 denotes NULL
        tree *temp= new tree(arr[index]);
        root = temp;
        root->left = build(2*index+1,root->left,arr,n);
        root->right = build(2*index+2,root->right,arr,n);
    }
    return root;
}
void inorder(tree *root){
    if(root){
        inorder(root->left);
        cout<<root->data<<" ";
        inorder(root->right);
    }
}
bool is_mirror(tree *root1, tree *root2)
{
    if (root1 == NULL && root2 == NULL) return true;

    if (root1 == NULL || root2 == NULL) return false;

    return is_mirror(root1->left, root2->right) && is_mirror(root1->right, root2->left);
}
int main()
{
    int n1,n2;
    cin>>n1>>n2;
    int arr1[n1], arr2[n2];
    for (int i = 0; i < n1; ++i) {
        cin>>arr1[i];
    }
    for (int i = 0; i < n2; ++i) {
        cin>>arr2[i];
    }
    tree *root1= build(0,root1,arr1,n1);
    tree *root2= build(0,root2,arr2,n2);
    inorder(root1);
    inorder(root2);
    cout<<(is_mirror(root1,root2)?"Yes":"No");

}
