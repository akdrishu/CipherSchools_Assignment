//Diameter of Binary Tree
// author: ayush dwivedi

#include "bits/stdc++.h"

using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;
typedef long long int ll;
const ll mod = 1e9 + 7;

class tree{
public:
    int data;
    tree *left, *right;
    tree(int x){
        this->data=x;
        this->left=this->right=NULL;
    }
};

tree *build(int index, tree *root, int arr[], int n){
    if(index<n){
        if(arr[index]==-1)  return NULL; //-1 denotes NULL
        tree *temp= new tree(arr[index]);
        root = temp;
        root->left = build(2*index+1,root->left,arr,n);
        root->right = build(2*index+2,root->right,arr,n);
    }
    return root;
}
void inorder(tree *root){
    if(root){
        inorder(root->left);
        cout<<root->data<<" ";
        inorder(root->right);
    }
}
int find(tree *root,int &h)
{
    if(root==NULL)return 0;
    int lh=find(root->left,h);
    int rh=find(root->right,h);
    h=max(h,lh+rh+1);
    return max(lh,rh)+1;
}
int diameter(tree *root)
{
    int h=-1;
    find(root,h);
    return h;
}
int main()
{
    int n,n1,n2;
    cin>>n>>n1>>n2;
    int arr[n];
    for (int i = 0; i < n; ++i) {
        cin>>arr[i];
    }
    tree *root= build(0,root,arr,n);
    inorder(root);
    cout<<diameter(root);
}
