//Connect Nodes on the same level (Hard)
// author: ayush dwivedi

#include "bits/stdc++.h"

using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;
typedef long long int ll;
const ll mod = 1e9 + 7;

class tree {
public:
    int data;
    tree *left, *right, *next;

    tree(int x) {
        this->data = x;
        this->left = this->right = this->next=NULL;
    }
};

tree *build(int index, tree *root, int arr[], int n) {
    if (index < n) {
        if (arr[index] == -1) return NULL; //-1 denotes NULL
        tree *temp = new tree(arr[index]);
        root = temp;
        root->left = build(2 * index + 1, root->left, arr, n);
        root->right = build(2 * index + 2, root->right, arr, n);
    }
    return root;
}

void inorder(tree *root) {
    if (root) {
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}
int main() {
    int n, item;
    cin >> n>>item;
    int arr[n];
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    tree *root = build(0, root, arr, n);
    queue<tree *> temp;
    temp.push(root);
    tree *prev= NULL;
    int sz=1;
    while(!temp.empty()){
        if(temp.front()){
            if(!prev){
                prev=temp.front();
            }
            else{
                prev->next=temp.front();
            }
            tree *infi= temp.front();
            temp.pop();
            if(!infi->left) temp.push(infi->left);
            if(!infi->right) temp.push(infi->right);
            sz--;
            if(sz==0)   temp.push(NULL);
        }
        else{
            prev=NULL;
            temp.pop();
            sz=temp.size();

        }
    }
}
