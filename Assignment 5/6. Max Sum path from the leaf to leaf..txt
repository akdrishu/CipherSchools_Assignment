//Max Sum path from the leaf to leaf.
// author: ayush dwivedi

#include "bits/stdc++.h"

using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;
typedef long long int ll;
const ll mod = 1e9 + 7;

class tree{
public:
    int data;
    tree *left, *right;
    tree(int x){
        this->data=x;
        this->left=this->right=NULL;
    }
};

tree *build(int index, tree *root, int arr[], int n){
    if(index<n){
        if(arr[index]==-1)  return NULL; //-1 denotes NULL
        tree *temp= new tree(arr[index]);
        root = temp;
        root->left = build(2*index+1,root->left,arr,n);
        root->right = build(2*index+2,root->right,arr,n);
    }
    return root;
}
void inorder(tree *root){
    if(root){
        inorder(root->left);
        cout<<root->data<<" ";
        inorder(root->right);
    }
}
int solve(tree *root, int &ans){
    if (root==NULL) return 0;
    if (!root->left && !root->right) return root->data;
    int l = solve(root->left, ans);
    int r = solve(root->right, ans);
    if (root->left && root->right){
        ans = max(ans, l + r + root->data);
        return max(l, r) + root->data;
    }
    return (!root->left? r + root->data: l + root->data);
}
int main()
{
    int n,n1,n2;
    cin>>n>>n1>>n2;
    int arr[n];
    for (int i = 0; i < n; ++i) {
        cin>>arr[i];
    }
    tree *root= build(0,root,arr,n);
    inorder(root);
    int ans=0;
    cout<<solve(root,ans);
}
