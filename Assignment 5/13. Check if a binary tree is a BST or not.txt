//Check if a binary tree is a BST or not
// author: ayush dwivedi

#include "bits/stdc++.h"

using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;
typedef long long int ll;
const ll mod = 1e9 + 7;

class tree{
public:
    int data;
    tree *left, *right;
    tree(int x){
        this->data=x;
        this->left=this->right=NULL;
    }
};

tree *build(int index, tree *root, int arr[], int n){
    if(index<n){
        if(arr[index]==-1)  return NULL; //-1 denotes NULL
        tree *temp= new tree(arr[index]);
        root = temp;
        root->left = build(2*index+1,root->left,arr,n);
        root->right = build(2*index+2,root->right,arr,n);
    }
    return root;
}
void inorder(tree *root){
    if(root){
        inorder(root->left);
        cout<<root->data<<" ";
        inorder(root->right);
    }
}

bool is_bst(tree *root, int info_left, int info_right){
    if(root){
        if(root->data < info_left || root->data> info_right)    return false;
        return is_bst(root->left,info_left,root->data-1) && is_bst(root->right,root->data+1,info_right);
    }
    return true;
}

int main()
{
    int n;
    cin>>n;
    int a[n];
    for (int i = 0; i < n; ++i) {
        cin>>a[i];
    }
    tree *root;
    root=build(0,root,a,n);
    cout<<(is_bst(root,INT_MIN,INT_MAX)?"BTS":"Not a BST");
}
