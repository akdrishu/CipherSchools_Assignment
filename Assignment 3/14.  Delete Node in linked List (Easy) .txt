//delete a node from a linked list
// author: ayush dwivedi

#include <bits/stdc++.h>

using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;

class node {
public:
    int data;
    node *next;

    node(int x) {
        this->data = x;
        next = NULL;
    }

    void print(node *head) {
        cout << "the linked list is: ";
        node *temp = head;
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

node *ll_creation(int n, node *head) {
    int x;
    cin >> x;
    head = new node(x);
    node *prev = head;
    for (int i = 0; i < n - 1; ++i) {
        int y;
        cin >> y;
        node *temp = new node(y);
        prev->next = temp;
        prev = temp;
    }
    return head;
}
int len(node *head){
    int x=0;
    while(head){
        x++;
        head=head->next;
    }
    return x;
}
pair<node*, node*> find_node(node *head,int item){
    if(item==head->data)    return {NULL,head};
    node *prev=head;
    while(head){
        if(head->data==item){
            return {prev,head};
        }
        prev=head;
        head=head->next;
    }
    return {NULL,NULL};
}
int main() {
    ios_base::sync_with_stdio(0);
    int size;
    cin>>size;
    node *head;
    head=ll_creation(size,head);
    int item;
    cin>>item;
    if(!head || (find_node(head,item).first==NULL && find_node(head,item).second==NULL ))    cout<<"Node not found\n";
    else{
        if(find_node(head,item).first==NULL){
            node *temp=head;
            head=head->next;
            free(temp);
        }
        else{
            find_node(head,item).first->next=find_node(head,item).second->next;
            free(find_node(head,item).second);
        }
    }
    head->print(head);

}

