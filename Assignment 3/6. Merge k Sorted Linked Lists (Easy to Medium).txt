// https://www.geeksforgeeks.org/merge-k-sorted-linked-lists/
// author: ayush dwivedi

#include <bits/stdc++.h>

using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;

class node {
public:
    int data;
    node *next;

    node(int x) {
        this->data = x;
        next = NULL;
    }

    void print(node *head) {
        cout << "the linked list is: ";
        node *temp = head;
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

node *ll_creation(int n, node *head) {
    int x;
    cin >> x;
    head = new node(x);
    node *prev = head;
    for (int i = 0; i < n - 1; ++i) {
        int y;
        cin >> y;
        node *temp = new node(y);
        prev->next = temp;
        prev = temp;
    }
    return head;
}

int main() {
    ios_base::sync_with_stdio(0);
    int k;
    cin >> k;
    node *arr[k];
    for (int i = 0; i < k; ++i) {
        int size;
        cin >> size;
        arr[i] = ll_creation(size, arr[i]);
    }
    for (int i = 0; i < k; ++i) {
        arr[i]->print(arr[i]);
    }
    node *head=NULL, *prev = head;
    bool nonull = true;
    while (nonull) {
        int index;
        int x = INT_MAX;
        nonull = false;
        for (int i = 0; i < k; ++i) {
            if (arr[i] == NULL) continue;
            else {
                if (arr[i]->data < x) {
                    index = i;
                    x = arr[i]->data;
                    nonull = true;
                }
            }
        }
        if (arr[index] != NULL) {
            arr[index] = arr[index]->next;
            if (head == NULL) {
                head = new node(x), prev = head;
            } else {
                prev->next = new node(x);
                prev = prev->next;
            }
        }
    }
    prev->next=NULL;
    head->print(head);
}

