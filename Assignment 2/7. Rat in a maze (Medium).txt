// https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1#
// author: ayush dwivedi

#include <bits/stdc++.h>
using namespace std;
#define debug(...) cout<< " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] " ;

#define MAX 5
vector<string> findPath(int m[MAX][MAX], int n);

// Position this line where user code will be pasted.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;

        int m[MAX][MAX];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }

        vector<string> result = findPath(m, n);
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}// } Driver Code Ends


// User function template for C++

// m is the given matrix and n is the order of matrix
// MAX is the upper limit of N ie 5

bool isvalid_cell(int i, int j,int n, int m[MAX][MAX],vector<vector<bool>> &vis){
    if(i<0 || j<0 || i>=n || j>=n || m[i][j]==0 || vis[i][j])    return false;
    return true;
}

void path(int i, int j, int m[MAX][MAX], int n, vector<string>& ans, string empty,vector<vector<bool>> &vis){
    if(i==n-1 && j==n-1 && m[i][j]!=0){
        ans.push_back(empty);
        return;
    }
    if(!isvalid_cell(i,j,n,m,vis))  return;
    vis[i][j]=true;

    path(i-1,j,m,n,ans,empty+"U",vis); //going up
    path(i+1,j,m,n,ans,empty+"D",vis); //going down
    path(i,j-1,m,n,ans,empty+"L",vis); //going left
    path(i,j+1,m,n,ans,empty+"R",vis); //going right
    vis[i][j]=false;
}

vector<string> findPath(int m[MAX][MAX], int n) {
    vector<string> ans;
    vector<vector<bool>> vis(n,vector<bool>(n,false));
    path(0,0,m,n,ans,"",vis);
    return ans;
}

